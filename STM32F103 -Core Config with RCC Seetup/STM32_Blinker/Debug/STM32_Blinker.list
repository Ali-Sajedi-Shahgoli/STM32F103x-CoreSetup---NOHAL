
STM32_Blinker.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000030c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000418  08000420  00010420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000418  08000418  00010420  2**0
                  CONTENTS
  4 .ARM          00000000  08000418  08000418  00010420  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000418  08000420  00010420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000418  08000418  00010418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800041c  0800041c  0001041c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  08000420  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08000420  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010420  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00010449  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a9b  00000000  00000000  0001048c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000396  00000000  00000000  00010f27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  000112c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000084  00000000  00000000  00011388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00010d58  00000000  00000000  0001140c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000014cc  00000000  00000000  00022164  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000582f9  00000000  00000000  00023630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000001d4  00000000  00000000  0007b92c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000055  00000000  00000000  0007bb00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000000 	.word	0x20000000
 8000128:	00000000 	.word	0x00000000
 800012c:	08000400 	.word	0x08000400

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000004 	.word	0x20000004
 8000148:	08000400 	.word	0x08000400

0800014c <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800015a:	2b00      	cmp	r3, #0
 800015c:	db0c      	blt.n	8000178 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800015e:	79fb      	ldrb	r3, [r7, #7]
 8000160:	f003 021f 	and.w	r2, r3, #31
 8000164:	4907      	ldr	r1, [pc, #28]	; (8000184 <__NVIC_ClearPendingIRQ+0x38>)
 8000166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800016a:	095b      	lsrs	r3, r3, #5
 800016c:	2001      	movs	r0, #1
 800016e:	fa00 f202 	lsl.w	r2, r0, r2
 8000172:	3360      	adds	r3, #96	; 0x60
 8000174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000178:	bf00      	nop
 800017a:	370c      	adds	r7, #12
 800017c:	46bd      	mov	sp, r7
 800017e:	bc80      	pop	{r7}
 8000180:	4770      	bx	lr
 8000182:	bf00      	nop
 8000184:	e000e100 	.word	0xe000e100

08000188 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000188:	b480      	push	{r7}
 800018a:	b083      	sub	sp, #12
 800018c:	af00      	add	r7, sp, #0
 800018e:	4603      	mov	r3, r0
 8000190:	6039      	str	r1, [r7, #0]
 8000192:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000194:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000198:	2b00      	cmp	r3, #0
 800019a:	db0a      	blt.n	80001b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800019c:	683b      	ldr	r3, [r7, #0]
 800019e:	b2da      	uxtb	r2, r3
 80001a0:	490c      	ldr	r1, [pc, #48]	; (80001d4 <__NVIC_SetPriority+0x4c>)
 80001a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001a6:	0112      	lsls	r2, r2, #4
 80001a8:	b2d2      	uxtb	r2, r2
 80001aa:	440b      	add	r3, r1
 80001ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80001b0:	e00a      	b.n	80001c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80001b2:	683b      	ldr	r3, [r7, #0]
 80001b4:	b2da      	uxtb	r2, r3
 80001b6:	4908      	ldr	r1, [pc, #32]	; (80001d8 <__NVIC_SetPriority+0x50>)
 80001b8:	79fb      	ldrb	r3, [r7, #7]
 80001ba:	f003 030f 	and.w	r3, r3, #15
 80001be:	3b04      	subs	r3, #4
 80001c0:	0112      	lsls	r2, r2, #4
 80001c2:	b2d2      	uxtb	r2, r2
 80001c4:	440b      	add	r3, r1
 80001c6:	761a      	strb	r2, [r3, #24]
}
 80001c8:	bf00      	nop
 80001ca:	370c      	adds	r7, #12
 80001cc:	46bd      	mov	sp, r7
 80001ce:	bc80      	pop	{r7}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	e000e100 	.word	0xe000e100
 80001d8:	e000ed00 	.word	0xe000ed00

080001dc <RCC_HSE_CLOCK>:

static __IO MSTICKS = 0;


void RCC_HSE_CLOCK(void)
{
 80001dc:	b480      	push	{r7}
 80001de:	af00      	add	r7, sp, #0


  RCC->CFGR &= ~(RCC_CFGR_PLLMULL); // Clear BitFields
 80001e0:	4b36      	ldr	r3, [pc, #216]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 80001e2:	685b      	ldr	r3, [r3, #4]
 80001e4:	4a35      	ldr	r2, [pc, #212]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 80001e6:	f423 1370 	bic.w	r3, r3, #3932160	; 0x3c0000
 80001ea:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (RCC_CFGR_PLLMULL9); //SET PLL to 9X
 80001ec:	4b33      	ldr	r3, [pc, #204]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 80001ee:	685b      	ldr	r3, [r3, #4]
 80001f0:	4a32      	ldr	r2, [pc, #200]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 80001f2:	f443 13e0 	orr.w	r3, r3, #1835008	; 0x1c0000
 80001f6:	6053      	str	r3, [r2, #4]

  RCC->CFGR &= ~(RCC_CFGR_USBPRE); // USB PRESCALER = 1.5
 80001f8:	4b30      	ldr	r3, [pc, #192]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 80001fa:	685b      	ldr	r3, [r3, #4]
 80001fc:	4a2f      	ldr	r2, [pc, #188]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 80001fe:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8000202:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->CR,RCC_CR_HSEON); // TURN ON THE HSE
 8000204:	4b2d      	ldr	r3, [pc, #180]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 8000206:	681b      	ldr	r3, [r3, #0]
 8000208:	4a2c      	ldr	r2, [pc, #176]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 800020a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800020e:	6013      	str	r3, [r2, #0]

  while((RCC->CR & RCC_CR_HSERDY) == 0); // Wait for HSE to boot
 8000210:	bf00      	nop
 8000212:	4b2a      	ldr	r3, [pc, #168]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800021a:	2b00      	cmp	r3, #0
 800021c:	d0f9      	beq.n	8000212 <RCC_HSE_CLOCK+0x36>

  RCC->CFGR |= (0x1 >> RCC_CFGR_PLLSRC_Pos); // Select HSE for the PLL MUX
 800021e:	4b27      	ldr	r3, [pc, #156]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 8000220:	4a26      	ldr	r2, [pc, #152]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 8000222:	685b      	ldr	r3, [r3, #4]
 8000224:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->CR,RCC_CR_PLLON); // Turn On the PLL
 8000226:	4b25      	ldr	r3, [pc, #148]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 8000228:	681b      	ldr	r3, [r3, #0]
 800022a:	4a24      	ldr	r2, [pc, #144]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 800022c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000230:	6013      	str	r3, [r2, #0]

  while((RCC->CR & RCC_CR_PLLRDY) == 0); // Wait for the PLL to turn On
 8000232:	bf00      	nop
 8000234:	4b21      	ldr	r3, [pc, #132]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 8000236:	681b      	ldr	r3, [r3, #0]
 8000238:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800023c:	2b00      	cmp	r3, #0
 800023e:	d0f9      	beq.n	8000234 <RCC_HSE_CLOCK+0x58>

  FLASH->ACR = FLASH_ACR_PRFTBE | FLASH_ACR_LATENCY_1; //clear latency fields
 8000240:	4b1f      	ldr	r3, [pc, #124]	; (80002c0 <RCC_HSE_CLOCK+0xe4>)
 8000242:	2212      	movs	r2, #18
 8000244:	601a      	str	r2, [r3, #0]


  RCC->CFGR &= ~(RCC_CFGR_SW); // Clear Bit fields or system Clock
 8000246:	4b1d      	ldr	r3, [pc, #116]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 8000248:	685b      	ldr	r3, [r3, #4]
 800024a:	4a1c      	ldr	r2, [pc, #112]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 800024c:	f023 0303 	bic.w	r3, r3, #3
 8000250:	6053      	str	r3, [r2, #4]
  SET_BIT(RCC->CFGR,RCC_CFGR_SW_1); // Set System Clock MUXto PLL input
 8000252:	4b1a      	ldr	r3, [pc, #104]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 8000254:	685b      	ldr	r3, [r3, #4]
 8000256:	4a19      	ldr	r2, [pc, #100]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 8000258:	f043 0302 	orr.w	r3, r3, #2
 800025c:	6053      	str	r3, [r2, #4]

  while(( RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_1);
 800025e:	bf00      	nop
 8000260:	4b16      	ldr	r3, [pc, #88]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 8000262:	685b      	ldr	r3, [r3, #4]
 8000264:	f003 030c 	and.w	r3, r3, #12
 8000268:	2b08      	cmp	r3, #8
 800026a:	d1f9      	bne.n	8000260 <RCC_HSE_CLOCK+0x84>
  RCC->CFGR &= ~(RCC_CFGR_HPRE);
 800026c:	4b13      	ldr	r3, [pc, #76]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 800026e:	685b      	ldr	r3, [r3, #4]
 8000270:	4a12      	ldr	r2, [pc, #72]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 8000272:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000276:	6053      	str	r3, [r2, #4]
  RCC->CFGR &= ~(RCC_CFGR_PPRE1);
 8000278:	4b10      	ldr	r3, [pc, #64]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 800027a:	685b      	ldr	r3, [r3, #4]
 800027c:	4a0f      	ldr	r2, [pc, #60]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 800027e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000282:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (RCC_CFGR_PPRE1_2);
 8000284:	4b0d      	ldr	r3, [pc, #52]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	4a0c      	ldr	r2, [pc, #48]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 800028a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800028e:	6053      	str	r3, [r2, #4]
  RCC->CFGR &= ~(RCC_CFGR_PPRE2);
 8000290:	4b0a      	ldr	r3, [pc, #40]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 8000292:	685b      	ldr	r3, [r3, #4]
 8000294:	4a09      	ldr	r2, [pc, #36]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 8000296:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800029a:	6053      	str	r3, [r2, #4]


  RCC->CFGR &= ~(RCC_CFGR_ADCPRE);
 800029c:	4b07      	ldr	r3, [pc, #28]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 800029e:	685b      	ldr	r3, [r3, #4]
 80002a0:	4a06      	ldr	r2, [pc, #24]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 80002a2:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80002a6:	6053      	str	r3, [r2, #4]
  RCC->CFGR |= (RCC_CFGR_ADCPRE_1);
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 80002aa:	685b      	ldr	r3, [r3, #4]
 80002ac:	4a03      	ldr	r2, [pc, #12]	; (80002bc <RCC_HSE_CLOCK+0xe0>)
 80002ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80002b2:	6053      	str	r3, [r2, #4]


 // For more Info Refer to COLCK TREE and Reference Manual

}
 80002b4:	bf00      	nop
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bc80      	pop	{r7}
 80002ba:	4770      	bx	lr
 80002bc:	40021000 	.word	0x40021000
 80002c0:	40022000 	.word	0x40022000

080002c4 <RCC_SYSTICK_CONFIG>:

void RCC_SYSTICK_CONFIG(uint32_t RELOAD_VALUE)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	b082      	sub	sp, #8
 80002c8:	af00      	add	r7, sp, #0
 80002ca:	6078      	str	r0, [r7, #4]

  SysTick->CTRL = 0;
 80002cc:	4b12      	ldr	r3, [pc, #72]	; (8000318 <RCC_SYSTICK_CONFIG+0x54>)
 80002ce:	2200      	movs	r2, #0
 80002d0:	601a      	str	r2, [r3, #0]
  SysTick->LOAD = RELOAD_VALUE-1;
 80002d2:	4a11      	ldr	r2, [pc, #68]	; (8000318 <RCC_SYSTICK_CONFIG+0x54>)
 80002d4:	687b      	ldr	r3, [r7, #4]
 80002d6:	3b01      	subs	r3, #1
 80002d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority(SysTick_IRQn,0);
 80002da:	2100      	movs	r1, #0
 80002dc:	f04f 30ff 	mov.w	r0, #4294967295
 80002e0:	f7ff ff52 	bl	8000188 <__NVIC_SetPriority>
  SysTick->VAL = 0;
 80002e4:	4b0c      	ldr	r3, [pc, #48]	; (8000318 <RCC_SYSTICK_CONFIG+0x54>)
 80002e6:	2200      	movs	r2, #0
 80002e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL |= SysTick_CTRL_CLKSOURCE_Msk;
 80002ea:	4b0b      	ldr	r3, [pc, #44]	; (8000318 <RCC_SYSTICK_CONFIG+0x54>)
 80002ec:	681b      	ldr	r3, [r3, #0]
 80002ee:	4a0a      	ldr	r2, [pc, #40]	; (8000318 <RCC_SYSTICK_CONFIG+0x54>)
 80002f0:	f043 0304 	orr.w	r3, r3, #4
 80002f4:	6013      	str	r3, [r2, #0]
  SysTick->CTRL |= SysTick_CTRL_TICKINT_Msk;
 80002f6:	4b08      	ldr	r3, [pc, #32]	; (8000318 <RCC_SYSTICK_CONFIG+0x54>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a07      	ldr	r2, [pc, #28]	; (8000318 <RCC_SYSTICK_CONFIG+0x54>)
 80002fc:	f043 0302 	orr.w	r3, r3, #2
 8000300:	6013      	str	r3, [r2, #0]
  SysTick->CTRL |= SysTick_CTRL_ENABLE_Msk;
 8000302:	4b05      	ldr	r3, [pc, #20]	; (8000318 <RCC_SYSTICK_CONFIG+0x54>)
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	4a04      	ldr	r2, [pc, #16]	; (8000318 <RCC_SYSTICK_CONFIG+0x54>)
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	6013      	str	r3, [r2, #0]


}
 800030e:	bf00      	nop
 8000310:	3708      	adds	r7, #8
 8000312:	46bd      	mov	sp, r7
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	e000e010 	.word	0xe000e010

0800031c <RCC_MSTICKS_INC>:


void RCC_MSTICKS_INC(void)
{
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0
	MSTICKS++;
 8000320:	4b04      	ldr	r3, [pc, #16]	; (8000334 <RCC_MSTICKS_INC+0x18>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	3301      	adds	r3, #1
 8000326:	4a03      	ldr	r2, [pc, #12]	; (8000334 <RCC_MSTICKS_INC+0x18>)
 8000328:	6013      	str	r3, [r2, #0]
}
 800032a:	bf00      	nop
 800032c:	46bd      	mov	sp, r7
 800032e:	bc80      	pop	{r7}
 8000330:	4770      	bx	lr
 8000332:	bf00      	nop
 8000334:	2000001c 	.word	0x2000001c

08000338 <SysTick_Handler>:
  return MSTICKS;
}


void SysTick_Handler(void)
{
 8000338:	b580      	push	{r7, lr}
 800033a:	af00      	add	r7, sp, #0
  NVIC_ClearPendingIRQ(SysTick_IRQn);
 800033c:	f04f 30ff 	mov.w	r0, #4294967295
 8000340:	f7ff ff04 	bl	800014c <__NVIC_ClearPendingIRQ>
  RCC_MSTICKS_INC();
 8000344:	f7ff ffea 	bl	800031c <RCC_MSTICKS_INC>
}
 8000348:	bf00      	nop
 800034a:	bd80      	pop	{r7, pc}

0800034c <main>:


#include "main.h"

int main(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	af00      	add	r7, sp, #0

	RCC_HSE_CLOCK();
 8000350:	f7ff ff44 	bl	80001dc <RCC_HSE_CLOCK>
	RCC_SYSTICK_CONFIG(72000);
 8000354:	4801      	ldr	r0, [pc, #4]	; (800035c <main+0x10>)
 8000356:	f7ff ffb5 	bl	80002c4 <RCC_SYSTICK_CONFIG>
	while(1)
 800035a:	e7fe      	b.n	800035a <main+0xe>
 800035c:	00011940 	.word	0x00011940

08000360 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000364:	bf00      	nop
 8000366:	46bd      	mov	sp, r7
 8000368:	bc80      	pop	{r7}
 800036a:	4770      	bx	lr

0800036c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800036c:	f7ff fff8 	bl	8000360 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000370:	480b      	ldr	r0, [pc, #44]	; (80003a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000372:	490c      	ldr	r1, [pc, #48]	; (80003a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000374:	4a0c      	ldr	r2, [pc, #48]	; (80003a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000378:	e002      	b.n	8000380 <LoopCopyDataInit>

0800037a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800037c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037e:	3304      	adds	r3, #4

08000380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000384:	d3f9      	bcc.n	800037a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000386:	4a09      	ldr	r2, [pc, #36]	; (80003ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000388:	4c09      	ldr	r4, [pc, #36]	; (80003b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800038c:	e001      	b.n	8000392 <LoopFillZerobss>

0800038e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000390:	3204      	adds	r2, #4

08000392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000394:	d3fb      	bcc.n	800038e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000396:	f000 f80f 	bl	80003b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039a:	f7ff ffd7 	bl	800034c <main>
  bx lr
 800039e:	4770      	bx	lr
  ldr r0, =_sdata
 80003a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a4:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80003a8:	08000420 	.word	0x08000420
  ldr r2, =_sbss
 80003ac:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80003b0:	20000020 	.word	0x20000020

080003b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b4:	e7fe      	b.n	80003b4 <ADC1_2_IRQHandler>
	...

080003b8 <__libc_init_array>:
 80003b8:	b570      	push	{r4, r5, r6, lr}
 80003ba:	2600      	movs	r6, #0
 80003bc:	4d0c      	ldr	r5, [pc, #48]	; (80003f0 <__libc_init_array+0x38>)
 80003be:	4c0d      	ldr	r4, [pc, #52]	; (80003f4 <__libc_init_array+0x3c>)
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	10a4      	asrs	r4, r4, #2
 80003c4:	42a6      	cmp	r6, r4
 80003c6:	d109      	bne.n	80003dc <__libc_init_array+0x24>
 80003c8:	f000 f81a 	bl	8000400 <_init>
 80003cc:	2600      	movs	r6, #0
 80003ce:	4d0a      	ldr	r5, [pc, #40]	; (80003f8 <__libc_init_array+0x40>)
 80003d0:	4c0a      	ldr	r4, [pc, #40]	; (80003fc <__libc_init_array+0x44>)
 80003d2:	1b64      	subs	r4, r4, r5
 80003d4:	10a4      	asrs	r4, r4, #2
 80003d6:	42a6      	cmp	r6, r4
 80003d8:	d105      	bne.n	80003e6 <__libc_init_array+0x2e>
 80003da:	bd70      	pop	{r4, r5, r6, pc}
 80003dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e0:	4798      	blx	r3
 80003e2:	3601      	adds	r6, #1
 80003e4:	e7ee      	b.n	80003c4 <__libc_init_array+0xc>
 80003e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ea:	4798      	blx	r3
 80003ec:	3601      	adds	r6, #1
 80003ee:	e7f2      	b.n	80003d6 <__libc_init_array+0x1e>
 80003f0:	08000418 	.word	0x08000418
 80003f4:	08000418 	.word	0x08000418
 80003f8:	08000418 	.word	0x08000418
 80003fc:	0800041c 	.word	0x0800041c

08000400 <_init>:
 8000400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000402:	bf00      	nop
 8000404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000406:	bc08      	pop	{r3}
 8000408:	469e      	mov	lr, r3
 800040a:	4770      	bx	lr

0800040c <_fini>:
 800040c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800040e:	bf00      	nop
 8000410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000412:	bc08      	pop	{r3}
 8000414:	469e      	mov	lr, r3
 8000416:	4770      	bx	lr
